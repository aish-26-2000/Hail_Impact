# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HailstormDamageAssessment
                                 A QGIS plugin
 Satellite-based hailstorm damage assessment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-06-17
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Aiswarya V V
        email                : aiswarya.ga20@iiitmk.ac.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from qgis.analysis import *
import processing, tempfile


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .hail_impact_dialog import HailstormDamageAssessmentDialog
import os.path
import time
import sys
from qgis import processing

class HailstormDamageAssessment:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HailstormDamageAssessment_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HailImpact')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HailstormDamageAssessment', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hail_impact/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HailImpact'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HailImpact'),
                action)
            self.iface.removeToolBarIcon(action)


    def saveRaster1(self):
        filename = QFileDialog.getExistingDirectory(
            self.dlg, "Select folder"
        )
        self.dlg.lineEdit.setText(filename)

    def saveRaster2(self):
        filename = QFileDialog.getExistingDirectory(
            self.dlg, "Select folder"
        )
        self.dlg.lineEdit_2.setText(filename)

    def saveRaster3(self):
        filename = QFileDialog.getExistingDirectory(
            self.dlg, "Select folder"
        )
        self.dlg.lineEdit_3.setText(filename)

    def saveRaster4(self):
        filename = QFileDialog.getExistingDirectory(
            self.dlg, "Select folder"
        )
        self.dlg.lineEdit_4.setText(filename)

    def saveRaster5(self):
        filename = QFileDialog.getExistingDirectory(
            self.dlg, "Select folder"
        )
        self.dlg.lineEdit_5.setText(filename)


    def getPreRed(self):
        layer = None
        layername = self.dlg.comboBox.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPreNir(self):
        layer = None
        layername = self.dlg.comboBox_2.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPreSwir1(self):
        layer = None
        layername = self.dlg.comboBox_3.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPreSwir2(self):
        layer = None
        layername = self.dlg.comboBox_4.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPostRed(self):
        layer = None
        layername = self.dlg.comboBox_5.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPostNir(self):
        layer = None
        layername = self.dlg.comboBox_6.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPostSwir1(self):
        layer = None
        layername = self.dlg.comboBox_7.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPostSwir2(self):
        layer = None
        layername = self.dlg.comboBox_8.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getCropMask(self):
        layer = None
        layername = self.dlg.comboBox_9.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPreNDVI(self):
        layer = None
        layername = self.dlg.comboBox_10.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPreNDTI(self):
        layer = None
        layername = self.dlg.comboBox_11.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPostNDVI(self):
        layer = None
        layername = self.dlg.comboBox_12.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPostNDTI(self):
        layer = None
        layername = self.dlg.comboBox_13.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPreNDVIMasked(self):
        layer = None
        layername = self.dlg.comboBox_14.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPreNDTIMasked(self):
        layer = None
        layername = self.dlg.comboBox_15.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getPostNDVIMasked(self):
        layer = None
        layername = self.dlg.comboBox_16.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer
    
    
    def getPostNDTIMasked(self):
        layer = None
        layername = self.dlg.comboBox_17.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getDevNDVI(self):
        layer = None
        layername = self.dlg.comboBox_18.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getDevNDTI(self):
        layer = None
        layername = self.dlg.comboBox_19.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getClassifiedNDVI(self):
        layer = None
        layername = self.dlg.comboBox_20.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getClassifiedNDTI(self):
        layer = None
        layername = self.dlg.comboBox_21.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def calc_pre_ndvi(self):
        b1 = self.getPreNir()
        b2 = self.getPreRed()
        output = os.path.join(self.dlg.lineEdit.text(),"Pre_ndvi.tif")
        entries = []
        #nir band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'nir'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #red band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'red'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("nir" -  "red") / ("nir" + "red")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Pre-event NDVI Output Created Successfully ", level=Qgis.Success, duration=3)
        if self.dlg.checkBox.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit.text(),"Pre_ndvi.tif"))

    def calc_pre_ndti(self):
        b1 = self.getPreSwir1()
        b2 = self.getPreSwir2()
        output = os.path.join(self.dlg.lineEdit.text(),"Pre_ndti.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'SWIR1'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'SWIR2'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("SWIR1" -  "SWIR2") / ("SWIR1" + "SWIR2")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Pre-event NDTI Output Created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit.text(),"Pre_ndti.tif"))

    def calc_post_ndvi(self):
        b1 = self.getPostNir()
        b2 = self.getPostRed()
        output = os.path.join(self.dlg.lineEdit.text(),"Post_ndvi.tif")
        entries = []
        #nir band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'nir'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #red band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'red'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("nir" -  "red") / ("nir" + "red")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Post-event NDVI Output Created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit.text(),"Post_ndvi.tif"))

    def calc_post_ndti(self):
        b1 = self.getPostSwir1()
        b2 = self.getPostSwir2()
        output = os.path.join(self.dlg.lineEdit.text(),"Post_ndti.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'SWIR1'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'SWIR2'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("SWIR1" -  "SWIR2") / ("SWIR1" + "SWIR2")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Post-event NDTI Output Created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit.text(),"Post_ndti.tif"))

    def calc_masked_pre_ndvi(self):
        b1 = self.getCropMask()
        b2 = self.getPreNDVI()
        output = os.path.join(self.dlg.lineEdit_2.text(),"Pre_ndvi_masked.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'mask'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'ndvi'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("mask" AND "ndvi")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Pre-ndvi masked Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_2.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_2.text(),"Pre_ndvi_masked.tif"))

    def calc_masked_pre_ndti(self):
        b1 = self.getCropMask()
        b2 = self.getPreNDTI()
        output = os.path.join(self.dlg.lineEdit_2.text(),"Pre_ndti_masked.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'mask'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'ndti'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("mask" AND "ndti")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Pre-ndti masked Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_2.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_2.text(),"Pre_ndti_masked.tif"))

    def calc_masked_post_ndvi(self):
        b1 = self.getCropMask()
        b2 = self.getPostNDVI()
        output = os.path.join(self.dlg.lineEdit_2.text(),"Post_ndvi_masked.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'mask'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'ndvi'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("mask" AND "ndvi")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Post-ndvi masked Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_2.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_2.text(),"Post_ndvi_masked.tif"))

    def calc_masked_post_ndti(self):
        b1 = self.getCropMask()
        b2 = self.getPostNDTI()
        output = os.path.join(self.dlg.lineEdit_2.text(),"Post_ndti_masked.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'mask'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'ndti'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '("mask" AND "ndti")', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("Post-ndti masked Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_2.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_2.text(),"Post_ndti_masked.tif"))

    def calc_ndvi_dev(self):
        b1 = self.getPreNDVIMasked()
        b2 = self.getPostNDVIMasked()
        output = os.path.join(self.dlg.lineEdit_3.text(),"ndvi_dev.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'pre'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'post'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '({("post" -  "pre") / "pre"} * 100)', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("NDVI Deviation created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_3.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_3.text(),"ndvi_dev.tif"))

    def calc_ndti_dev(self):
        b1 = self.getPreNDTIMasked()
        b2 = self.getPostNDTIMasked()
        output = os.path.join(self.dlg.lineEdit_3.text(),"ndti_dev.tif")
        entries = []
        #swir1 band
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'pre'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
        #swir2 band
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'post'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '({("post" -  "pre") / "pre"} * 100)', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("NDTI Deviation created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_3.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_3.text(),"ndti_dev.tif"))

    def calc_ndvi_classes(self):
        b1 = self.getDevNDVI()
        output = os.path.join(self.dlg.lineEdit_4.text(),"ndvi_dev_classes.tif")
        entries = []
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'Input'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)

        calc = QgsRasterCalculator( ' ( "Input" >= -20  )  * 1  +  (-20 > "Input" >= -30  ) * 2  +  ("Input" <   -30)  * 3', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("NDVI Deviation classes created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_4.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_4.text(),"ndvi_dev_classes.tif"))

    def calc_ndti_classes(self):
        b1 = self.getDevNDTI()
        output = os.path.join(self.dlg.lineEdit_4.text(),"ndti_dev_classes.tif")
        entries = []
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'Input'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)

        calc = QgsRasterCalculator( ' ( "Input" >= -20  )  * 1  +  (-20 > "Input" >= -30  ) * 2  +  ("Input" <   -30)  * 3', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()
        self.iface.messageBar().pushMessage("NDTI Deviation classes created Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_4.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_4.text(),"ndti_dev_classes.tif"))

    def combine_raster(self):
        b1 = self.getClassifiedNDVI()
        b2 = self.getClassifiedNDTI()
        output = os.path.join(self.dlg.lineEdit_5.text(),"combined raster.tif")
        entries = []
       
        ras1 = QgsRasterCalculatorEntry()
        ras1.ref = 'ndvi'
        ras1.raster = b1
        ras1.bandNumber = 1
        entries.append(ras1)
       
        ras2 = QgsRasterCalculatorEntry()
        ras2.ref = 'ndti'
        ras2.raster = b2
        ras2.bandNumber = 1
        entries.append(ras2)
        
        calc = QgsRasterCalculator( '"ndvi" + "ndti"', \
        output, 'GTiff', b1.extent(), b1.width(), b1.height(), entries )
        calc.processCalculation()       
        self.iface.messageBar().pushMessage("Combined Successfully", level=Qgis.Success, duration=3)
        if self.dlg.checkBox_5.isChecked():
            out = iface.addRasterLayer(os.path.join(self.dlg.lineEdit_5.text(),"combined raster.tif"))


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HailstormDamageAssessmentDialog()

        self.dlg.pushButton_3.clicked.connect(self.saveRaster1)
        self.dlg.pushButton_4.clicked.connect(self.saveRaster2)
        self.dlg.pushButton_6.clicked.connect(self.saveRaster3)
        self.dlg.pushButton_8.clicked.connect(self.saveRaster4)
        self.dlg.pushButton_10.clicked.connect(self.saveRaster5)

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_3.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_4.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_5.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_6.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_7.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_8.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_9.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_10.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_11.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_12.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_13.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_14.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_15.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_16.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_17.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_18.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_19.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_20.addItems([layer.name() for layer in layers])
        self.dlg.comboBox_21.addItems([layer.name() for layer in layers])


        self.dlg.pushButton_2.clicked.connect(self.calc_pre_ndvi)
        self.dlg.pushButton_2.clicked.connect(self.calc_pre_ndti)
        self.dlg.pushButton_2.clicked.connect(self.calc_post_ndvi)
        self.dlg.pushButton_2.clicked.connect(self.calc_post_ndti)
        self.dlg.pushButton_5.clicked.connect(self.calc_masked_pre_ndvi)
        self.dlg.pushButton_5.clicked.connect(self.calc_masked_pre_ndti)
        self.dlg.pushButton_5.clicked.connect(self.calc_masked_post_ndvi)
        self.dlg.pushButton_5.clicked.connect(self.calc_masked_post_ndti)
        self.dlg.pushButton_7.clicked.connect(self.calc_ndvi_dev)
        self.dlg.pushButton_7.clicked.connect(self.calc_ndti_dev)
        self.dlg.pushButton_9.clicked.connect(self.calc_ndvi_classes)
        self.dlg.pushButton_9.clicked.connect(self.calc_ndti_classes)
        self.dlg.pushButton_11.clicked.connect(self.combine_raster)



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
